Consecutive Prime Sum
Some prime numbers can be expressed as a sum of other consecutive prime numbers.

For Example

5
=
2
+
3
5=2+3,
17
=
2
+
3
+
5
+
7
17=2+3+5+7,
41
=
2
+
3
+
5
+
7
+
11
+
13
41=2+3+5+7+11+13.
Your task is to find out how many prime numbers which satisfy this property are present in the range 
3
3 to 
N
N subject to a constraint that summation should always start with number 
2
2.

Write code to find out the number of prime numbers that satisfy the above-mentioned property in a given range.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of a single integer 
N
N
Output Format
Print the total number of all such prime numbers which are less than or equal to 
N
N.

Constraints
1
≤
T
≤
1
0
5
1≤T≤10 
5
 
2
<
N
≤
1
0
5
2<N≤10 
5
 
Sample 1:
Input
Output
2
20
15
2
1
Explanation:
Test Case 1: Below 20 are two such cases 5 and 17

5
=
2
+
3
5=2+3
17
=
2
+
3
+
5
+
7
17=2+3+5+7
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
    static final int LIMIT = 100001;
    static boolean[] isPrime = new boolean[LIMIT];
    static ArrayList<Integer> primes = new ArrayList<>();

    public static void main(String[] args) {
        for (int i = 0; i < LIMIT; i++) {
            isPrime[i] = true;
        }

        for (int i = 2; i * i < LIMIT; i++) {
            if (isPrime[i]) {
                primes.add(i);
                for (int j = i * i; j < LIMIT; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int sum = 5;
            int i = 2;
            int count = 0;

            while (sum <= n) {
                if (isPrime[sum]) {
                    count++;
                }
                if (i < primes.size()) {
                    sum += primes.get(i);
                    i++;
                } else {
                    break;
                }
            }

            System.out.println(count);
        }

        sc.close();
    }
}
