qUiRkY qUesTs (Hard)
This problem has the exact same setup as qUiRkY qUesTs (Easy). The only difference between them is that in this version, you must solve the problem for every prefix of the given array.

Suppose you have an array 
B
B. Consider performing the following operation on it:

First, choose any non-empty subsequence of 
B
B.
Then, replace each element of this subsequence with the MEX
†
†
  of 
B
B.
Note that while you choose a subsequence, the replacement is done with the MEX of the entire array 
B
B, not only the elements of the subsequence.
For example, if 
B
=
[
1
,
0
,
4
,
1
,
2
]
B=[1,0,4,1,2] and you choose the subsequence 
[
1
,
0
,
1
]
[1,0,1], those elements will be replaced by the MEX of 
B
B (which equals 
3
3), to obtain 
[
3
,
3
,
4
,
3
,
2
]
[3,3,4,3,2].

We define 
f
(
B
)
f(B) to be the maximum possible sum of 
B
B that can be obtained by performing the given operation any number of times (possibly, zero).
Note that since 
B
B is changed after a move, its MEX may also change for future moves.

Now, for the actual problem.
You are given an array 
A
A of length 
N
N.
For each 
i
∈
[
1
,
N
]
i∈[1,N], compute 
f
(
[
A
1
,
A
2
,
…
,
A
i
]
)
f([A 
1
​
 ,A 
2
​
 ,…,A 
i
​
 ]).
This is, solve the problem for each prefix of 
A
A.

†
†
  The MEX (minimum excludant) of an array of integers is defined as the smallest non-negative integer which does not occur in the array. For example:

The MEX of 
[
2
,
2
,
1
]
[2,2,1] is 
0
0 because 
0
0 is not in the array.
The MEX of 
[
0
,
1
,
2
]
[0,1,2] is 
3
3 because 
0
,
1
,
2
0,1,2 are present in the array but 
3
3 is not.
The MEX of 
[
3
,
0
,
1
]
[3,0,1] is 
2
2 because 
0
,
1
0,1 are present in the array but 
2
2 is not.
Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of two lines of input.
The first line of each test case contains a single integer 
N
N — the length of the array.
The second line contains 
N
N space-separated integers 
A
1
,
A
2
,
…
,
A
N
A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 
Output Format
For each test case, output 
N
N space-separated integers, where the 
i
t
h
i 
th
  integer denotes the value of 
f
(
[
A
1
,
A
2
,
…
,
A
i
]
)
f([A 
1
​
 ,A 
2
​
 ,…,A 
i
​
 ]).

Constraints
1
≤
T
≤
2
×
1
0
5
1≤T≤2×10 
5
 
1
≤
N
≤
2
×
1
0
5
1≤N≤2×10 
5
 
0
≤
A
i
≤
1
0
12
0≤A 
i
​
 ≤10 
12
  for all 
1
≤
i
≤
N
1≤i≤N
The sum of 
N
N over all test cases won't exceed 
2
×
1
0
5
2×10 
5
 .
Sample 1:
Input
Output
3
3
4 6 5
2
0 2
3
1 2 3
4 10 15 
1 4 
1 4 9 
Explanation:
Test case 
1
1: For every prefix, it's optimal to not perform any operations.

Test case 
2
2: We have 
f
(
[
0
]
)
=
1
f([0])=1 by converting it to 
[
1
]
[1], and 
f
(
[
0
,
2
]
)
=
4
f([0,2])=4 by converting it to 
[
2
,
2
]
[2,2].
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

template <typename T>
struct FenwickTree {
    int n;
    vector<T> tree;

    FenwickTree(int size) : n(size), tree(n + 2, 0) {}  // Use n+2 to avoid overflow

    void update(int idx, T delta) {
        for (++idx; idx <= n; idx += idx & -idx) {
            tree[idx] += delta;
        }
    }

    T query(int idx) {
        if (idx < 0) return 0;
        idx = min(idx, n);  // Ensure we don't query beyond the tree size
        T res = 0;
        for (++idx; idx > 0; idx -= idx & -idx) {
            res += tree[idx];
        }
        return res;
    }
};

void solve() {
    int N;
    cin >> N;
    vector<long long> A(N);
    for (int i = 0; i < N; ++i) {
        cin >> A[i];
    }

    int max_size = N + 1;
    vector<bool> present(max_size + 1, false);
    FenwickTree<long long> count_bit(max_size);
    FenwickTree<long long> sum_bit(max_size);
    long long mex = 0;
    long long sum_total = 0;

    for (int i = 0; i < N; ++i) {
        long long x = A[i];
        sum_total += x;

        if (x <= max_size) {
            if (x < max_size) {
                count_bit.update(x, 1);
                sum_bit.update(x, x);
            }

            if (x <= max_size) {
                if (x < max_size) {
                    present[x] = true;
                }
                // Update mex
                while (mex <= max_size && present[mex]) {
                    mex++;
                }
            }
        }

        long long current_mex = mex;
        long long count_lt = count_bit.query(current_mex - 1);
        long long sum_lt = sum_bit.query(current_mex - 1);
        long long sum_f = sum_total + current_mex * count_lt - sum_lt;

        cout << sum_f << " ";
    }
    cout << "\n";
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);

    int T;
    cin >> T;
    while (T--) {
        solve();
    }

    return 0;
}





right ::




#include <bits/stdc++.h>
using namespace std;

int main(){
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    
    int test = 1;
    cin >> test;

    while(test--){
        long long N; cin >> N;
        vector<long long> A(N);
        for(auto &a : A) cin >> a;
        vector<int> Mex(N);
        long long sum = 0,mex = 0;
        {
            queue<tuple<int,int,int,int>> q;
            q.push({0,N,0,N});
            int pos = 0;
            multiset<long long> S;
            while(q.size()){
                auto [l,r,low,high] = q.front(); q.pop();
                if(l == r) continue;
                int m = (l+r)/2;
                if(m+1 < pos){
                    S.clear();
                    pos = 0,sum = 0,mex = 0;
                }
                while(pos <= m) sum += A.at(pos),S.insert(A.at(pos++));
                while(mex < low){
                    sum -= *S.begin(); S.erase(S.begin());
                    mex++;
                }

                long long maxv = sum+mex*mex,best = mex;
                auto itr = S.begin();
                long long memosum = sum;
                for(int i=mex+1; i<=high; i++){
                    if(itr == S.end()) break;
                    sum -= *itr; 
                    long long now = sum+1LL*i*i;
                    if(maxv <= now) maxv = now,best = i;
                    itr++;
                }
                sum = memosum;
                Mex.at(m) = best;
                q.push({l,m,low,best});
                q.push({m+1,r,best,high});
            }
        }
        priority_queue<long long,vector<long long>,greater<>> Q;
        sum = 0,mex = 0;
        for(int i=0; i<N; i++){
            sum += A.at(i);
            Q.push(A.at(i));
            while(mex < Mex.at(i)) sum -= Q.top(),Q.pop(),mex++;
            
            if(i) cout << " ";
            cout << sum+mex*mex;
        }
        cout << "\n";
    }
}
