Maximum Subarray
Given two arrays 
A
A and 
B
B of sizes 
N
N and 
M
M respectively. You can apply the following operation until the array 
B
B is non-empty:

Choose either the first or the last element of array 
B
B.
Insert the chosen element to either the front or the back of array 
A
A.
Delete the chosen element from array 
B
B.
For example, let 
A
=
[
9
,
7
]
A=[9,7] and 
B
=
[
1
,
3
,
2
]
B=[1,3,2]. In one operation, we can choose either 
X
=
1
X=1 or 
X
=
2
X=2 (first or last element of array 
B
B). We can insert 
X
X in array 
A
A and make it either 
A
=
[
X
,
9
,
7
]
A=[X,9,7] or 
A
=
[
9
,
7
,
X
]
A=[9,7,X]. The chosen 
X
X is deleted from array 
B
B. Thus, it will become either 
B
=
[
3
,
2
]
B=[3,2] (when chosen 
X
X is 
1
1) or 
B
=
[
1
,
3
]
B=[1,3] (when chosen 
X
X is 
2
2).

Find the maximum sum of any subarray of the array 
A
A that you can achieve after performing exactly 
M
M operations.

Note: A subarray of an array is formed by deleting some (possibly zero) elements from the beginning of the array and some (possible zero) elements from the end of the array. A subarray can be empty as well.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of 
4
4 lines of input.
The first line of each test contains a single integer 
N
N, the size of array 
A
A.
The next line contains 
N
N space-separated integers, denoting elements of array 
A
A.
The third line of each test contains a single integer 
M
M, the size of array 
B
B.
The next line contains 
M
M space-separated integers, denoting elements of array 
B
B.
Output Format
For each test case, output on a new line the maximum sum of any subarray of the array 
A
A that you can achieve after performing exactly 
M
M operations.

Constraints
1
≤
T
≤
10
1≤T≤10
1
≤
N
≤
1
0
5
1≤N≤10 
5
 
1
≤
M
≤
1
0
5
1≤M≤10 
5
 
−
1
0
8
≤
A
i
,
B
i
≤
1
0
8
−10 
8
 ≤A 
i
​
 ,B 
i
​
 ≤10 
8
 
Sample 1:
Input
Output
3
5
3 26 -79 72 23
2
66 44
1
81
1
-97
5
10 -5 14 -20 4
3
-10 5 -2
205
81
24
Explanation:
Test case 
1
1:

Operation 
1
1: Add the first element of array 
B
B to the back of array 
A
A. Thus, 
A
=
[
3
,
26
,
−
79
,
72
,
23
,
66
]
A=[3,26,−79,72,23,66] and 
B
=
[
44
]
B=[44].
Operation 
2
2: Add the first element of array 
B
B to the back of array 
A
A. Thus, 
A
=
[
3
,
26
,
−
79
,
72
,
23
,
66
,
44
]
A=[3,26,−79,72,23,66,44] and 
B
=
[
]
B=[].
The, maximum sum subarray of array 
A
A is 
[
72
,
23
,
66
,
44
]
[72,23,66,44] having sum 
72
+
23
+
66
+
44
=
205
72+23+66+44=205.

Test case 
2
2:

Operation 
1
1: Add the first element of array 
B
B to the front of array 
A
A. Thus, 
A
=
[
−
97
,
81
]
A=[−97,81] and 
B
=
[
]
B=[].
The, maximum sum subarray of array 
A
A is 
[
81
]
[81] having sum 
81
81.

Test case 
3
3:

Operation 
1
1: Add the last element of array 
B
B to the back of array 
A
A. Thus, 
A
=
[
10
,
−
5
,
14
,
−
20
,
4
,
−
2
]
A=[10,−5,14,−20,4,−2] and 
B
=
[
−
10
,
5
]
B=[−10,5].
Operation 
2
2: Add the last element of array 
B
B to the front of array 
A
A. Thus, 
A
=
[
5
,
10
,
−
5
,
14
,
−
20
,
4
,
−
2
]
A=[5,10,−5,14,−20,4,−2] and 
B
=
[
−
10
]
B=[−10].
Operation 
3
3: Add the first element of array 
B
B to the front of array 
A
A. Thus, 
A
=
[
−
10
,
5
,
10
,
−
5
,
14
,
−
20
,
4
,
−
2
]
A=[−10,5,10,−5,14,−20,4,−2] and 
B
=
[
]
B=[].
The, maximum sum subarray of array 
A
A is 
[
5
,
10
,
−
5
,
14
]
[5,10,−5,14] having sum 
5
+
10
−
5
+
14
=
24
5+10−5+14=24
#include<iostream>
#include<algorithm>
#include<vector>
#include <climits>
typedef long long ll;
using namespace std;

ll kadane(vector<ll>& a){
    ll max_so_far = INT_MIN, max_ending_here = 0;
 
    for (int i = 0; i < a.size(); i++) {
        max_ending_here = max_ending_here + a[i];
        if (max_so_far < max_ending_here)
            max_so_far = max_ending_here;
 
        if (max_ending_here < 0)
            max_ending_here = 0;
    }
    return max_so_far;
}

void test(){
    int n,m;
    cin>>n;
    
    vector<ll> a(n), vec1(n);
    for(int i=0; i<n; i++){
        cin>>a[i];
        vec1[i]=a[i];
    }
    
    cin>>m;
    
    vector<ll> b(m), vec2(n+m);
    for(int i=0; i<m; i++){
        cin>>b[i];
        if(b[i]>0){
          vec1.push_back(b[i]);
          vec2.push_back(b[i]);
        }
    }
    for(int i=0; i<n; i++){
        vec2.push_back(a[i]);
    }
    
    ll max_sum =max(kadane(vec1),kadane(vec2));
    cout<<max_sum<<endl;
    
}

int main(){
    int t;
    cin>>t;
    while(t--){
        test();
    }
    return 0;
}
