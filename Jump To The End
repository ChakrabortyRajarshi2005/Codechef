Jump To The End
You are given a sequence of nonnegative integers 
A
1
,
A
2
,
…
,
A
N
A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 .

There is a pawn placed on the first element of the sequence, i.e. at position 
1
1. When the pawn is on the position numbered with 
x
x, it can jump at most 
A
x
A 
x
​
  places to the right. In other words, if 
A
x
>
0
A 
x
​
 >0, the pawn can jump to any position from 
x
+
1
x+1 to 
x
+
A
x
x+A 
x
​
 . If 
A
x
=
0
A 
x
​
 =0, the pawn can not move from the position numbered with 
x
x at all.

Find the maximum possible number of jumps using which it is possible to place the pawn on the last position, i.e. the position numbered with 
N
N, or determine that it is impossible to reach it.

Input Format
The first line of the input contains a single integer 
T
T - the number of test cases. The description of 
T
T test cases follows.

The first line of each test case contains an integer 
N
N.

The second line contains 
N
N space-separated integers 
A
1
,
A
2
,
…
,
A
N
A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 .

Output Format
For each test case, print a single line containing one integer. In case it is possible to reach the last position, this integer should be the maximum possible number of jumps in which the pawn can be placed on the last position. Otherwise, this integer should be 
−
1
−1.
Constraints
1
≤
T
≤
100
1≤T≤100
2
≤
N
≤
2
⋅
1
0
5
2≤N≤2⋅10 
5
 
the sum of 
N
N over all test cases does not exceed 
4
⋅
1
0
5
4⋅10 
5
 
0
≤
A
i
≤
N
−
i
0≤A 
i
​
 ≤N−i for each valid 
i
i
Subtasks
Subtask #1 (30 points):

2
≤
N
≤
2000
2≤N≤2000
the sum of 
N
N over all test cases does not exceed 
4000
4000
Subtask #2 (70 points): original constraints

Sample 1:
Input
Output
4
2
1 0
3
0 1 0
5 
2 0 1 1 0
6
2 2 2 2 1 0
1
-1
3
5
Explanation:
Example case 1: The maximum number of jumps in a path from the position 
1
1 to the position 
N
N is 
1
1.

Example case 2: It is impossible to reach the position 
N
N because 
A
1
=
0
A 
1
​
 =0.

Example case 3: It is possible to reach the position 
N
N using 
3
3 jumps if we follow the path 
1
→
3
→
4
→
5
1→3→4→5.

Example case 4: It is possible to reach the position 
N
N using 
5
5 jumps if we follow the path 
1
→
2
→
3
→
4
→
5
→
6
1→2→3→4→5→6.

Sample 2:
Input
Output
3
7
4 0 1 0 2 0 0
4
3 1 0 0
6
3 0 0 1 0 0
2
1
-1
Explanation:
Example case 1: It is possible to reach the position 
N
N using 
2
2 jumps if we follow the path 
1
→
5
→
7
1→5→7. It is impossible to reach it using 
3
3 jumps because when the pawn is located at the position 
3
3 it can not move anywhere.

Example case 2: It is possible to reach the position 
N
N using 
1
1 jump if the pawn jumps straight to the position 
N
N from the position 
1
1. Note that it must not jump to the position 
2
2 because it can not jump anywhere from that position.

Example case 3: It is impossible to reach the position 
N
N.
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
    public static void main(String[] args){
        try (Scanner sc = new Scanner(System.in)) {
            int cases  = sc.nextInt();
            while(--cases >= 0) {
                int n = sc.nextInt();
                int[] xArr = new int[n];
                int zeroCnt = 0;
                for(int i=0; i<n; i++) {
                    xArr[i] = sc.nextInt();
                    if(xArr[i] == 0)
                        zeroCnt++;
                }
                if(xArr[0] == 0) {
                    System.out.println(-1);
                    continue;
                }
                if(zeroCnt == 0 || (zeroCnt == 1 && xArr[n-1] == 0)) {
                    System.out.println(n-1);
                    continue;
                }
                solve(n ,xArr);
            }
        }
    }

     public static void solve(int n, int[] xArr) {
        int jumps = 0;
        int zeroIdx = -1;
        int jumpIdx = -1;
        for(int i=n-2; i>=0; i--) {
            if(xArr[i] > 0) {
                if(zeroIdx == -1){
                    jumpIdx = i;
                    jumps++;
                } else {
                    int diff = zeroIdx-i;
                    if(xArr[i] > diff) {
                        jumpIdx = i;
                        jumps++;
                        zeroIdx = -1;
                    }
                }    
            } else {
                if(zeroIdx == -1) {
                    zeroIdx = i;
                }
            }
        }

        System.out.println(jumps == 0 || jumpIdx != 0 ? -1 : jumps);
        
    }
}
