Chef Bakes Cake 3
Chef is an expert baker. Each cake costs him 
30
30 coins to make, and then he sells each for 
50
50 coins.

Chef is going to sell cakes for 
N
N days, numbered 
1
,
2
,
…
,
N
1,2,…,N. On the 
i
i-th day, 
A
i
A 
i
​
  customers will visit Chef's shop and buy exactly 
1
1 cake each (if Chef has any cakes available, that is).

However, Chef preferring uniformity, will always produce the same number of cakes at the start of every day, say 
X
X. Because cakes become stale fast, he cannot keep the current day's cake for the next day. You want to decide this non-negative integer 
X
X in such a way that it maximizes Chef's profit over all 
N
N days.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains a single integer 
N
N - the number of days.
The second line contains 
N
N integers - 
A
1
,
A
2
,
…
,
A
N
A 
1
​
 ,A 
2
​
 ,…,A 
N
​
 .
Output Format
For each test case, output on a new line the maximum profit possible if we suitably decide the integer 
X
X.

Constraints
1
≤
T
≤
100
1≤T≤100
1
≤
N
≤
100
1≤N≤100
1
≤
A
i
≤
100
1≤A 
i
​
 ≤100
Sample 1:
Input
Output
6
3
1 1 1
3
2 2 1
3
100 1 1
3
100 100 1
1
42
8
4 2 3 5 4 5 2 9
60
70
60
1050
840
390
Explanation:
Test Case 1 : Chef chooses 
X
=
1
X=1, i.e. he makes 
1
1 cake every day. On each day, exactly 
1
1 customer comes to Chef's shop, and he is able to sell the 
1
1 cake he made. His total costs is 
30
⋅
3
=
90
30⋅3=90 coins, while he gets 
50
⋅
3
=
150
50⋅3=150 coins from selling his cakes. Thus, he makes a profit of 
60
60 coins.

Test Case 2 : If Chef chose 
X
=
1
X=1, he would get 
60
60 coins profit. Instead, if Chef chose 
X
=
2
X=2, he is able to sell 
2
+
2
+
1
=
5
2+2+1=5 cakes for 
250
250 coins, while they cost him 
180
180 coins. Thus, here Chef has a profit of 
70
70 coins which is the maximum possible.


#include <bits/stdc++.h>
using namespace std;

int main() {
	// your code goes here
    int T;
    cin>>T;
    while(T--){
        int N;
        cin>>N;
        int arr [N];
        for(int i=0;i<N;i++){
            cin>>arr[i];
        }
        int maxProfit =0;
        for (int X = 0; X <= 100; ++X) {
            int totalSold = 0;
            for (int i = 0; i < N; ++i) {
                totalSold += min(X, arr[i]);
            }

            int revenue = totalSold * 50;
            int cost = X * 30 * N;
            int profit = revenue - cost;

            maxProfit = max(maxProfit, profit);
        }
        cout<<maxProfit<<"\n";
    }
}
