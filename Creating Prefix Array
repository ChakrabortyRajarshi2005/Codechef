Creating Prefix Array
A "prefix array" is a data structure commonly used in programming, particularly in algorithms related to strings or arrays. Also known as a "prefix sum array", it stores cumulative sums of elements in an array.

We generally use it to optimize the time complexity of a given algorithm.

Using a prefix array in an array of integers: -

array (a)        -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
prefix array (b) -> [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
We created a prefix array, which stores a cumulative sum of all the previous indexes of the array. This is our prefix array for a.

Similarly, we also have prefix arrays for strings:

string s = "codechef";
prefixOfs = [c,co,cod,code,codec,codech,codeche,codechef]; 
We created a prefix array for "codechef". In strings, we use the prefix array in a different manner. We concatenate characters in our prefix array of strings.

Pseudo Code for prefix sum

PrefixSum(arr)
Input: Array arr of size N
Output: Prefix sum array prefixSum of size N

Initialize an array prefixSum of size N

prefixSum[0] = arr[0]
for i = 1 to N-1 do
    prefixSum[i] = prefixSum[i-1] + arr[i]
return prefixSum
Task
In the first line, given an integer N, the length of an array.
In the second line, given N integers in an array A1, A2,... AN,.
Print the prefix sum of the array.
Constraints
1
≤
N
≤
100000
1≤N≤100000
1
≤
A
i
≤
1000
1≤Ai≤1000

import java.util.*;
import java.io.*;
class Codechef {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        String[] input = br.readLine().split(" ");
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) arr[i] = Integer.parseInt(input[i]);
        int[] prefixSum = new int[N];
        prefixSum[0] = arr[0];
        for (int i = 1; i < N; i++) prefixSum[i] = prefixSum[i - 1] + arr[i];
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < N; i++) result.append(prefixSum[i]).append(" ");
        System.out.println(result.toString().trim());
    }
}
