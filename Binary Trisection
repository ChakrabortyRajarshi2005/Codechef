Binary Trisection
Chef has a binary string 
S
S of length 
N
N. Chef also has 
Q
Q queries.

Initially Chef has an empty basket. Chef processes all the queries successively.

After the 
i
i-th query:

Chef adds the substring of 
S
S consisting of all the positions from 
L
i
L 
i
​
  to 
R
i
R 
i
​
  into the basket.
He asks you whether all the binary strings in the basket can be rearranged to form a binary number divisible by 
3
3.
Note: A substring of a string is a contiguous subsequence of that string.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line of each test case contains two space-separated integers 
N
N and 
Q
Q — the length of the binary string 
S
S and the number of queries, respectively.
The next line contains a single binary string — 
S
S.
The next 
Q
Q lines describe the queries. The 
i
i-th of these 
Q
Q lines contains two space-separated integers 
L
i
L 
i
​
  and 
R
i
R 
i
​
 , denoting substring of 
S
S.
Output Format
For each test case, output on a new line after each query:

Print YESif all the binary strings in the basket can be rearranged to form a binary number divisible by 
3
3 , otherwise print NO.
You may print each character of the string in uppercase or lowercase (for example, the strings YES, yEs, yes, and yeS will all be treated as identical).

Constraints
1
≤
T
≤
5000
1≤T≤5000
1
≤
N
≤
2
⋅
1
0
5
1≤N≤2⋅10 
5
 
1
≤
Q
≤
2
⋅
1
0
5
1≤Q≤2⋅10 
5
 
1
≤
L
i
≤
R
i
≤
N
1≤L 
i
​
 ≤R 
i
​
 ≤N
The sum of 
N
N over all test cases won't exceed 
2
⋅
1
0
5
2⋅10 
5
 .
The sum of 
Q
Q over all test cases won't exceed 
2
⋅
1
0
5
2⋅10 
5
 .
Sample 1:
Input
Output
2
5 3
10101
1 3
3 5
1 5
9 4
110011101
3 4
4 5
2 3
9 9
NO
YES
YES
YES
NO
YES
YES
Explanation:
For the first test case:

After the first query the basket contains "
101
101". It cannot be rearranged to form any binary number divisible by 3.
After the second query the basket contains "
101
101" and "
101
101". It can be rearranged to form the binary number 
101101
101101 = 
45
45 (in decimal) divisible by 3.
After the third query the basket contains "
101
101", "
101
101" and "
10101
10101". It can be rearranged to form the binary number 
10101101101
10101101101 = 
1389
1389 (in decimal) divisible by 3.
For the second test case:

After the first query the basket contains "
00
00". It can be rearranged to form the binary number 
00
00 = 
0
0 (in decimal) divisible by 3.
After the second query the basket contains "
00
00" and "
01
01". It cannot be rearranged to form any binary number divisible by 3.
After the third query the basket contains "
00
00", "
01
01" and "
10
10". It can be rearranged to form the binary number 
100001
100001 = 
33
33 (in decimal) divisible by 3.
#include <bits/stdc++.h>
using namespace std;
#define int long long
bool check(int a,int b,int c,int d,int e)
{
    int odd=c+d+e;
    int mx=max({c,d,e});
    int mn=min({c,d,e});
    if(mn>=1)
    return 1;
    int even=a+b;
    if(odd==0)
    {
        int cur=2*b+a;
        cur%=3;
        if(cur)
        return 0;
        return 1;
    }
    else
    {
        if(even>=2)
        return 1;
        if(odd==mx)
        {
            int cur=odd&1;
            if(e)
            cur=0;
            if(even)
            {
                if(cur)
                return 1;
                return 0;
            }
            else
            {
                if(cur)
                return 0;
                return 1;
            }
        }
        if(odd-mx>=2)
        return 1;
        if(!(odd&1))
        {
            if(even)
            return 1;
            return 0;
        }
        if(e<=1)
        return 1;
        else
        {
            if(even)
            return 1;
            return 0;
        }
    }
}
void solve()
{
    int n,q;
    cin>>n>>q;
    string s;
    cin>>s;
    int a=0,b=0,c=0,d=0,e=0;
    vector<int> pref(n);
    for(int i=n-1;i>=0;i--)
    {
        if(s[i]=='1')
        {
            if((n-i-1)&1)
            pref[i]=2;
            else
            pref[i]=1;
        }
    }
    for(int i=n-2;i>=0;i--)
    {
        pref[i]+=pref[i+1];
        pref[i]%=3;
    }
    while(q--)
    {
        int l,r;
        cin>>l>>r;
        --l;
        --r;
        int cur=pref[l]-(r+1<n?pref[r+1]:0);
        if((n-1-r)&1)
        cur*=2;
        cur%=3;
        cur+=3;
        cur%=3;
        if((r-l)&1)
        {
            if(cur==1)
            a++;
            else if(cur==2)
            b++;
        }
        else
        {
            if(cur==1)
            c++;
            else if(cur==2)
            d++;
            else
            e++;
        }
        bool ans=check(a,b,c,d,e);
        if(ans)
        cout<<"YES";
        else
        cout<<"NO";
        cout<<'\n';
    }
}
int32_t main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--)
	solve();
}
