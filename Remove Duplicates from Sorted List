Remove Duplicates from Sorted List
You are given head of the non-empty sorted linked list where the value of the 
i
t
h
i 
th
  node will be 
A
i
A 
i
​
 .

Your task is to delete all duplicates such that each element appears only once and return the linked list sorted.

Input:
First line will contain 
T
T, number of test cases. Then the test cases follow.
The first line contains one integer 
N
N — the length of the linked list.
The second line contains 
N
N space separated integers 
A
1
,
A
2
,
…
A
N
A 
1
​
 ,A 
2
​
 ,…A 
N
​
  — the value of the linked list nodes starting from the head for the linked list.
Note:

For Java language, you need to:
Complete the function in the submit solution tab:

Node removeDuplicates(Node head){...}
 
 

For C++ language, you need to:
Complete the function in the submit solution tab:

Node* removeDuplicates(Node* head){...}
 
 

For Python language, you need to:
Complete the function in the submit solution tab:

def Node removeDuplicates(self, head):
Output:
The function you complete should return the required answer.

Constraints
1
≤
T
≤
10
1≤T≤10
1
≤
N
,
A
i
≤
1
0
5
1≤N,A 
i
​
 ≤10 
5
 
Sample 1:
Input
Output
3
5
1 1 6 8 8
5
1 2 3 4 5
4
5 5 5 5
1 6 8 
1 2 3 4 5 
5 
Explanation:
Test case 
1
1: We will remove duplicate entry of 
1
1, 
8
8. So the sorted linked list will be 
1
→
6
→
8
1→6→8.

Test case 
2
2: There is no duplicate entry. So the sorted linked list will be 
1
→
2
→
3
→
4
→
5
1→2→3→4→5.

Test case 
3
3: We will remove duplicate entry of 
5
5. So the sorted linked list will be 
5
5.

/* Linked List Node
struct Node {
    int data;
    struct Node next;
    Node(int x) {
        data = x;
        next = null;
    }
}; */

class Solution {
    Node removeDuplicates(Node head) {
        // your code here
        Set<Integer> st = new HashSet<>();
        Node temp=head;
        st.add(temp.data);
        while(temp.next!=null){
            Node cc = temp.next;
            if(st.contains(cc.data)){
                temp.next=cc.next;
                cc.next=null;
            }else{
            st.add(cc.data);
            temp=temp.next;
            }
        }
        return head;
    }
};
