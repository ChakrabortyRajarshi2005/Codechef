AndOr
You are given a binary array 
A
A of length 
N
N. Beauty of an array 
A
A is defined as:

(
(
(
(
A
1
&
A
2
)
∣
A
3
)
&
A
4
)
∣
⋯
 
)
†
((((A 
1
​
 &A 
2
​
 )∣A 
3
​
 )&A 
4
​
 )∣⋯) 
†
 
You are given 
Q
Q queries of the form:

Given index 
p
p and binary integer 
X
X, update 
A
p
A 
p
​
  to 
X
X and print the beauty of the array 
A
A.
Note: that each query changes array and after each query the array does not go back to original.

†
†
  
&
& represents bitwise AND operation and 
∣
∣ represents bitwise OR operation.

Input Format
The first line of input will contain a single integer 
T
T, denoting the number of test cases.
Each test case consists of multiple lines of input.
The first line contains an integer 
N
N - size of array 
A
A.
The second line contains 
N
N space-separated binary integers, 
A
1
,
A
2
,
A
3
,
…
,
A
N
A 
1
​
 ,A 
2
​
 ,A 
3
​
 ,…,A 
N
​
  - the elements of array 
A
A.
The third line contains an integer 
Q
Q - number of queries.
The next 
Q
Q lines contain 
2
2 integers 
p
p and 
X
X, denoting each query.
Output Format
For each query, output on a new line the value of operation applied on 
A
A.

Constraints
1
≤
T
≤
1
0
5
1≤T≤10 
5
 
1
≤
N
,
Q
≤
1
0
5
1≤N,Q≤10 
5
 
0
≤
A
i
,
X
≤
1
0≤A 
i
​
 ,X≤1
1
≤
p
≤
N
1≤p≤N
The sum of 
N
N and 
Q
Q over all test cases won't exceed 
1
0
5
10 
5
 .
Sample 1:
Input
Output
2
4
0 0 0 1
3
1 1
2 1
3 1
3
0 1 0
2
1 1
2 0
0
1
1
1
0
Explanation:
Test Case 1 : Operation for 
A
A is 
(
(
(
A
1
&
A
2
)
∣
A
3
)
&
A
4
)
(((A 
1
​
 &A 
2
​
 )∣A 
3
​
 )&A 
4
​
 ).

Query 1 :

A
A becomes 
{
1
,
0
,
0
,
1
}
{1,0,0,1} and beauty becomes 
0
0.
Query 2 :

A
A becomes 
{
1
,
1
,
0
,
1
}
{1,1,0,1} and beauty becomes 
1
1.
Query 3 :

A
A becomes 
{
1
,
1
,
1
,
1
}
{1,1,1,1} and beauty becomes 
1
1.
Test Case 2 : Operation for 
A
A is 
(
(
A
1
&
A
2
)
∣
A
3
)
((A 
1
​
 &A 
2
​
 )∣A 
3
​
 ).

Query 1 :

A
A becomes 
{
1
,
1
,
0
}
{1,1,0} and beauty becomes 
1
1.
Query 2 :

A
A becomes 
{
1
,
0
,
0
}
{1,0,0} and beauty becomes 
0
0.
/*    /\_/\
 *   (= ._.)
 *   / >  \>
 */       //
 //Hi Stalker aajkal code bhi stalk karne lage?! :)
 //solve 3 questions of div -2 within an 1hour to reach 1800 ASAP
 //believe nigga , you are not a fool
 //prefix sum, BS, strong rakho 3rd question wahi hota hai
 //try identifying patterns fast fast 2nd question wahi hota hai
 //read first question properly, dont solve it blindly otherwise u lose valuable info and lose time.
#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

vector<int> sieve(int max_num) {
    vector<bool> is_prime(max_num + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= max_num; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= max_num; j += i) {
                is_prime[j] = false;
            }
        }
    }
    vector<int> primes;
    for (int i = 2; i <= max_num; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
    // return is_prime;
    return primes;
}

bool is_palindrome(int a) {
    string g = to_string(a);
    string cg = g;
    reverse(g.begin(), g.end());
    return g == cg;
}

int factorial(int a) {
    if (a == 1 or a == 0) return 1;
    return factorial(a - 1) * a;
}

long long mod_inverse(long long base, long long modulus) {
    long long result = 1, exponent = modulus - 2;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = (result * base) % modulus;
        }
        base = (base * base) % modulus;
        exponent /= 2;
    }
    return result;
}
/*
vector<pair<long long, long long>> items(a);
for (auto& [f, s] : items) {
        cin >> f;
    }
    for (auto& [f, s] : items) {
        cin >> s;
    }
*/
// input pair 1 step
/*#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;*/
/*sort(Jobs.begin(), Jobs.end(), [](const vector<int>& a, const vector<int>& b)
   { return a[2] > b[2];
        });*/
// sort 2d array

/*
int start = lower_bound(same.begin(), same.end(), l) - same.begin();
int end = lower_bound(same.begin(), same.end(), r + 1) - same.begin();
*/
// finds the largest element greater than or equal
/*
#include <bits/stdc++.h>
#define mod 1000000007
using namespace std;
*/
void solve() {
    int n; 
    cin >> n;
    vector<int> v(n);
    for(int i = 0; i < n; i++){
        cin >> v[i];
    }
    set<int> st;
    for(int i = 0; i < n; i++){
        if(v[i] != i%2) st.insert(i);
    }
    st.insert(0);
    int q;
    cin >> q;
    while(q--){
        int ind, val;
        cin >> ind >> val;
        ind--;
        if(ind != 0) st.erase(ind);
        v[ind] = val;
        if(v[ind] != ind%2) st.insert(ind);
         int lst = *st.rbegin();
        cout << v[lst] << endl;
    }
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int q = 1;
    cin >> q;
    while (q--) {
        solve();
    }
}
// author: not_shai_tan -------> 19.0.12.12.8.18.7.19.7.0
// cot(?/2) = 0
