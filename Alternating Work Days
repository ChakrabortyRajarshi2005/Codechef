Alternating Work Days
Read problem statements in Mandarin, Russian, and Vietnamese as well.
Alice and Bob are two friends. Initially, the skill levels of them are zero. They work on alternative days, i.e one of Alice and Bob works on the odd-numbered days
(
1
,
3
,
5
,
…
 
)
(1,3,5,…) and the other works on the even-numbered days 
(
2
,
4
,
6
,
…
 
)
(2,4,6,…). The skill levels of Alice and Bob increase by 
A
,
B
A,B respectively on the days they work.

Determine if it is possible that the skill levels of Alice and Bob become exactly 
P
,
Q
P,Q respectively on some day.

Input Format
The first line contains an integer 
T
T, denoting the number of test cases. The 
T
T test cases then follow:
The first and only line of each test case contains four space-separated integers 
A
,
B
,
P
,
Q
A,B,P,Q.
Output Format
For each test case, print YES if it is possible that the skill levels of Alice and Bob become exactly 
P
,
Q
P,Q on some day, otherwise print NO.

You may print each character of the string in uppercase or lowercase (for example, the strings "yEs", "yes", "Yes" and "YES" will all be treated as identical).

Constraints
1
≤
T
≤
1
0
3
1≤T≤10 
3
 
1
≤
A
,
B
,
P
,
Q
≤
1
0
9
1≤A,B,P,Q≤10 
9
 
Subtasks
Subtask 1 (100 points): Original constraints
Sample 1:
Input
Output
4
1 2 1 2
1 2 3 2
4 3 4 6
3 5 9 25
YES
NO
YES
NO
Explanation:
Test Case 
1
1: Alice works on the first day and gains skill level 
1
1. Bob works on the second day and gains skill level 
2
2.

Test Case 
2
2: There is no possible way that the skill levels of Alice and Bob become 
3
3 and 
2
2 respectively.

Test Case 
3
3: Bob works on the first and third day and Alice works on the second day. Hence after the third day, the skill levels of Alice and Bob become 
1
⋅
4
=
4
1⋅4=4 and 
2
⋅
3
=
6
2⋅3=6 respectively.
import java.io.BufferedReader;
import java.io.InputStreamReader;

class Codechef {
    public static void main(String[] args) throws java.lang.Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        // Read the number of test cases
        int t = Integer.parseInt(br.readLine());
        
        for (int T = 0; T < t; T++) {
            // Read `a`, `b`, `p`, and `q`
            String[] inputs = br.readLine().split(" ");
            int a = Integer.parseInt(inputs[0]);
            int b = Integer.parseInt(inputs[1]);
            int p = Integer.parseInt(inputs[2]);
            int q = Integer.parseInt(inputs[3]);
            
            // Check if `p` and `q` are reachable
            if (p % a == 0 && q % b == 0) {  // `p` must be a multiple of `a`, and `q` a multiple of `b`
                int stepsA = p / a;          // Number of steps for `a`
                int stepsB = q / b;          // Number of steps for `b`
                
                if (Math.abs(stepsA - stepsB) <= 1) {
                    System.out.println("Yes");
                } else {
                    System.out.println("No");
                }
            } else {
                System.out.println("No");
            }
        }
    }
}
