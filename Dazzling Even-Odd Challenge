Dazzling Even-Odd Challenge
Dazzler has an interesting task for you.

You will be given an array 
A
A of 
N
N positive integers such that:

N
N is always even.
Exactly 
N
2
2
N
​
  elements in the array are even and 
N
2
2
N
​
  elements are odd.
In one operation, you should do the following steps:

Choose two different indices 
i
i and 
j
j 
(
1
≤
i
,
j
≤
N
)
(1≤i,j≤N).
Set 
A
i
:
=
A
i
+
1
A 
i
​
 :=A 
i
​
 +1.
Set 
A
j
:
=
A
j
−
1
A 
j
​
 :=A 
j
​
 −1.
You need to apply some finite (possibly zero) number of operations on the array such that:

The parity of the final element at each index is same as the parity of the initial element at that index. For example, if the 
i
t
h
i 
th
  element in the initial array is even, then, the 
i
t
h
i 
th
  element in the final array must be even as well.
All the 
N
2
2
N
​
  odd elements in the final array are equal.
All the 
N
2
2
N
​
  even elements in the final array are equal.
Print YES if it is possible to meet all the above conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.

Input Format
First line will contain 
T
T, number of test cases. Then the test cases follow.
First line of each test case contains 
N
N, number of elements in the array 
A
A. Note that, 
N
N is even.
Second line of each test case contains 
N
N space-separated positive integers, the elements of the array.
Output Format
For each test case, output in a single line, YES if it is possible to meet all the given conditions after doing some finite (possibly zero) number of operations. Otherwise, print NO.

You may print each character of the string in uppercase or lowercase (for example, the strings YeS, yEs, yes and YES will all be treated as identical).

Constraints
1
≤
T
≤
1
0
4
1≤T≤10 
4
 
2
≤
N
≤
2
⋅
1
0
5
2≤N≤2⋅10 
5
 
1
≤
A
[
i
]
≤
1
0
9
1≤A[i]≤10 
9
 
N
%
2
=
0
N%2=0
Sum of 
N
N over all test cases does not exceed 
2
⋅
1
0
5
2⋅10 
5
 .
Sample 1:
Input
Output
4
4
1 1 2 4
4
1 2 5 6
2
1 2
4
1 2 3 4
NO
YES
YES
YES
Explanation:
Test case 
1
1: It is not possible to satisfy all the given conditions using any number of operations.

Test case 
2
2: One of the possible sequence of operations is listed below:

In the first operation, choose 
i
=
2
i=2 and 
j
=
4
j=4. Thus, 
A
2
=
2
+
1
=
3
A 
2
​
 =2+1=3 and 
A
4
=
6
−
1
=
5
A 
4
​
 =6−1=5. The array will become 
[
1
,
3
,
5
,
5
]
[1,3,5,5].
In the second operation, choose 
i
=
2
i=2 and 
j
=
4
j=4. Thus, 
A
2
=
3
+
1
=
4
A 
2
​
 =3+1=4 and 
A
4
=
5
−
1
=
4
A 
4
​
 =5−1=4. The array will become 
[
1
,
4
,
5
,
4
]
[1,4,5,4].
In the third operation, choose 
i
=
1
i=1 and 
j
=
3
j=3. Thus, 
A
1
=
1
+
1
=
2
A 
1
​
 =1+1=2 and 
A
3
=
5
−
1
=
4
A 
3
​
 =5−1=4. The array will become 
[
2
,
4
,
4
,
4
]
[2,4,4,4].
In the fourth operation, choose 
i
=
1
i=1 and 
j
=
3
j=3. Thus, 
A
1
=
2
+
1
=
3
A 
1
​
 =2+1=3 and 
A
3
=
4
−
1
=
3
A 
3
​
 =4−1=3. The array will become 
[
3
,
4
,
3
,
4
]
[3,4,3,4].
Here, all the odd elements are equal and all the even elements are equal. Also, the parity at each index is preserved.

Test case 
3
3: The array 
[
1
,
2
]
[1,2] satisfies all the conditions. Thus, 
0
0 operations are needed.
import java.math.BigInteger;
import java.util.*;
import java.io.*;
import java.util.stream.Stream;

class CodeChef3 {
    
    public static void main(String[] args) throws java.lang.Exception {
        FastWriter out = new FastWriter();
        int t = in.nextInt();
        while (t-- > 0){
            int n = in.nextInt();
            int [] arr = ai(n);
            int emax = -1, omax = -1, emin = Integer.MAX_VALUE, omin = Integer.MAX_VALUE;
            for(int i = 0; i<n; i++){
                if((arr[i]&1) == 0){
                    emax = Math.max(emax, arr[i]);
                    emin = Math.min(emin, arr[i]);
                }
                else{
                    omax = Math.max(omax, arr[i]);
                    omin = Math.min(omin, arr[i]);
                }
            }
            long maxo = 0, maxe = 0, mino = 0, mine = 0;
            for(int i = 0; i<n; i++){
                if((arr[i]&1) == 0){
                    maxe += emax-arr[i];
                    mine += arr[i]-emin;
                } else{
                    maxo += omax-arr[i];
                    mino += arr[i]-omin;
                }
            }
            if(Math.abs(mino-maxe)%n == 0) System.out.println("YES");
            else if(Math.abs(maxo-mine)%n == 0) System.out.println("YES");
            else System.out.println("NO");
        }
        out.close();
    }
    
    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine().trim();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return str;
        }
    }
    static class FastWriter {
        private final BufferedWriter bw;

        public FastWriter() {
            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));
        }

        public void print(Object object) throws IOException {
            bw.append("").append(String.valueOf(object));
        }

        public void println(Object object) throws IOException {
            print(object);
            bw.append("\n");
        }

        public void close() throws IOException {
            bw.close();
        }
    }
    static FastReader in = new FastReader();
    static int [] ai(int n){
        int [] arr = new int [n];
        for(int i = 0; i<n; i++) arr[i] = in.nextInt();
        return arr;
    }

    static long [] al(int n){
        long [] arr = new long [n];
        for(int i = 0; i<n; i++) arr[i] = in.nextLong();
        return arr;
    }

    static long gcd(long a, long b) {
        while (b != 0) {
            long temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    static int aMax(int [] arr){
        int a = Integer.MIN_VALUE;
        for(int i = 0; i<arr.length; i++) a = Math.max(a, arr[i]);
        return a;
    }

    static int aMin(int [] arr){
        int a = Integer.MAX_VALUE;
        for(int i = 0; i<arr.length; i++) a = Math.min(a, arr[i]);
        return a;
    }

    static int binarySearch(int[] arr, int target) {
        int left = 0;
        int right = arr.length - 1;
        int result = -1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (arr[mid] < target) {
                result = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return result;
    }

    static int mod = (int) Math.pow(10, 9) + 7;

    static long lcm(long u, long v) {
        return (u / gcd(u, v)) * v;
    }

    static long sumOfNumbers(long start, long end){
        if(end < start) return 0;
        else if(end == start) return end;
        return (((end*(end+1))/2) - ((start*(start-1))/2));
    }

    static class Pair<T, U>{

        T f;
        U s;
        public Pair(T first, U sec){
            this.f = first;
            this.s = sec;
        }
    }

    static long pow(long a, long b){
        long res = 1;
        while(b > 0){
            if(b%2 == 1){
                res = (res * a%mod)%mod;
            }
            a = (a%mod*a%mod)%mod;
            b >>= 1;
        }
        return res%mod;
    }

    static boolean isPerfectSquare(long n){
        long k = (long) Math.sqrt(n);
        return (k*k) == n;
    }

    public static List<Integer> findFirstNPrimes(int n) {
        List<Integer> primes = new ArrayList<>();
        int num = 2;

        while (primes.size() < n) {
            if (isPrime(num)) {
                primes.add(num);
            }
            num++;
        }

        return primes;
    }


    static class  Triplet<T>{
        T x, y, z;

        public Triplet(T x, T y, T z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }
    }

    static Triplet<Long> extendedEuclid(long a, long b){ // a>b
        if(b == 0){
            return new Triplet<>(a, 0L, a);
        }

        Triplet<Long> smallAns = extendedEuclid(b, a%b);
        long y = smallAns.x - (a/b)*smallAns.y;
        return new Triplet<>(smallAns.y, y, smallAns.z);

    }

    static long modularMultiplicativeInverse(long a, long m){
        long gcd = gcd(a, m);
        if(gcd != 1){
            return -1;
        }
        long x = extendedEuclid(a, m).x;
        x = (x%m + m)%m;
        return x;
    }

    static long modDivide(long a, long b, long m){
        long inv = modularMultiplicativeInverse(b, m);
        if(inv == -1){
            return -1;
        }
        a %= m;
        return (inv * a)%m;
    }

    static class ListNode {
        int val;
        ListNode next;
        ListNode() {}
        ListNode(int val) { this.val = val; }
        ListNode(int val, ListNode next) { this.val = val; this.next = next; }
    }


    static long pow(long a, long b, long mod){
        long res = 1;
        while(b > 0){
            if(b%2 == 1){
                res = (res * a%mod)%mod;
            }
            a = (a%mod*a%mod)%mod;
            b >>= 1;
        }
        return res%mod;
    }

    static long bigPow(long base, long pow, long mod){
        BigInteger res = new BigInteger("1");
        BigInteger bBase = BigInteger.valueOf(base);
        BigInteger mod2 = BigInteger.valueOf(mod);
        while (pow > 0){
            if(pow%2 == 1){
                res = res.multiply(bBase);
                res = res.mod(mod2);
            }
            bBase = bBase.pow(2);
            bBase = bBase.mod(mod2);
            pow >>= 1;
        }
        res = res.mod(BigInteger.valueOf(mod));
        return res.longValue();
    }

    static boolean millerRobin(long n, long d, long a){
        long x = bigPow(a, d, n);

        if(x == 1 || x == n-1) return true;

        while (d != n-1){
            BigInteger bx = BigInteger.valueOf(x);
            bx = bx.multiply(bx).mod(BigInteger.valueOf(n));
            x = bx.longValue();
            d *= 2;

            if(x == 1) return false;
            if(x == n-1) return true;
        }

        return false;
    }
    public static boolean isPrime(long n){
        if(n <= 1 || n== 4) return false;
        if(n <= 3) return true;
        if(n%2 == 0) return false;

        long d = n-1;
        while ((d&1) == 0) d /= 2;

        long [] arr = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};
        for(long j : arr){
            if(n == j) return true;
            if(!millerRobin(n, d, j)) return false;
        }

        return true;
    }

    static int [] fenwickTree(List<Pair<Integer, Integer>> list, int n, int x){
        int [] res = new int [n];
        for(var pair: list){
            int i = pair.f;
            int j = pair.s;
            res[i] += x;
            if(j != n-1) res[j+1] -= x;
        }
        for(int i = 1; i<n; i++){
            res[i] += res[i-1];
        }
        return res;
    }

    static <T> void mergeSort(T [] arr, int l, int r, Comparator<T> c){
        if(l < r){
            int mid = l + (r-l)/2;
            mergeSort(arr, l, mid, c);
            mergeSort(arr, mid+1, r, c);
            merge(arr, l, mid, r, c);
        }
    }

    static <T> void merge(T [] arr, int l,int m, int r, Comparator<T> c){
        int n1 = m-l+1; //length of first array
        int n2 = r-m; //length of second array

        Object[] left = new Object[n1];
        Object[] right = new Object[n2];

        System.arraycopy(arr, l, left, 0, n1);
        for(int i = 0; i<n2; i++) right[i] = arr[m+1+i];

        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2){
            if(c.compare((T) left[i], (T) right[j]) <= 0){
                arr[k++] = (T) left[i++];
            } else{
                arr[k++] = (T) right[j++];
            }
        }

        while (i < n1){
            arr[k++] = (T) left[i++];
        }

        while (j < n2){
            arr[k++] = (T) right[j++];
        }
    }

    static class Graph{
        int vertices;
        List<Integer> [] edges;
        public Graph(int vertices){
            this.vertices = vertices;
            edges = new ArrayList [vertices];
            Arrays.setAll(edges, i -> new ArrayList<>());
        }

        void addEdge(int st, int end, boolean undirected){
            edges[st].add(end);
            if(undirected) edges[end].add(st);
        }

    }

    static int [] sieve(int n){
        int [] sieve = new int [n+1];
        sieve[0] = sieve[1] = 1;
        for(int i = 2; i<=n; i++){
            if(sieve[i] == 0){
                sieve[i] = i;
                for(int j = i*2; j<=n; j += i){
                    sieve[j] = i;
                }
            }
        }
        return sieve;
    }

    static Map<Integer, Integer> primeFactorise(int [] sieve, int n){
        Map<Integer, Integer> res = new HashMap<>();
        while (n > 1){
            int j = sieve[n];
            res.merge(j, 1, Integer::sum);
            n /= j;
        }
        return res;
    }

    static long lcmOfArray(int [] arr, int max){
        int [] sieve = sieve(max);
        long ans = 1;
        Map<Integer, Integer> primes = new HashMap<>();
        for (int j : arr) {
            Map<Integer, Integer> cur = primeFactorise(sieve, j);
            for (var entry : cur.entrySet()) {
                primes.merge(entry.getKey(), entry.getValue(), Math::max);
            }
        }
        for(var entry: primes.entrySet()){
            ans = (ans * pow(entry.getKey(), entry.getValue()))%mod;
        }
        return ans;
    }

    static ListNode toNode(int [] arr){
        ListNode head = new ListNode(arr[0]);
        ListNode cur = head;
        for(int i = 1; i<arr.length; i++){
            cur.next = new ListNode(arr[i]);
            cur = cur.next;
        }
        return head;
    }

    static void printNode(ListNode node){
        ListNode cur = node;
        while (cur != null){
            System.out.print(cur.val + " ");
            cur = cur.next;
        }
        System.out.println();
    }

    static long fac(long n, int mod){
        if(n == 0) return 1;
        long res = 1;
        while (n > 0){
            res = (res*n)%mod;
            n--;
        }
        return res;
    }

    static long nCrModPFermat(int n, int r, int p) {
        if (n<r) return 0;
        if (r == 0) return 1;

        int[] fac = new int[n + 1];
        fac[0] = 1;

        for (int i = 1; i <= n; i++)
            fac[i] = fac[i - 1] * i % p;

        return ((fac[n] * modularMultiplicativeInverse(fac[r], p)) % p *
                (modularMultiplicativeInverse(fac[n - r], p)) % p) % p;
    }
}
