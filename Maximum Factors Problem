Maximum Factors Problem
You are given an integer 
N
N. Let 
K
K be a divisor of 
N
N of your choice such that 
K
>
1
K>1, and let 
M
=
N
K
M= 
K
N
​
 . You need to find the smallest 
K
K such that 
M
M has as many divisors as possible.

Note: 
U
U is a divisor of 
V
V if 
V
V is divisible by 
U
U.

Input Format
The first line of the input contains an integer 
T
T - the number of test cases. The test cases then follow.
The only line of each test case contains an integer 
N
N.
Output Format
For each test case, output in a single line minimum value of 
K
K such that 
M
M has as many divisors as possible.

Constraints
1
≤
T
≤
3000
1≤T≤3000
2
≤
N
≤
1
0
9
2≤N≤10 
9
 
Sample 1:
Input
Output
3
3
4
6
3
2
2
Explanation:
Test case 
1
1: The only possible value for 
K
K is 
3
3, and that is the answer.
Test case 
2
2: There are two cases:
K
=
2
K=2. Then 
M
=
4
2
=
2
M= 
2
4
​
 =2, which has 
2
2 divisors (
1
1 and 
2
2).
K
=
4
K=4. Then 
M
=
4
4
=
1
M= 
4
4
​
 =1, which has 
1
1 divisor (
1
1).
Therefore the answer is 
2
2.

Test case 
3
3: There are three cases:
K
=
2
K=2. Then 
M
=
6
2
=
3
M= 
2
6
​
 =3, which has 
2
2 divisors (
1
1 and 
3
3).
K
=
3
K=3. Then 
M
=
6
3
=
2
M= 
3
6
​
 =2, which has 
2
2 divisors (
1
1 and 
2
2).
K
=
6
K=6. Then 
M
=
6
6
=
1
M= 
6
6
​
 =1, which has 
1
1 divisor (
1
1).
Therefore the answer is 
2
2.
import java.util.*;
import java.lang.*;
import java.io.*;

class Codechef
{
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		 Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        
        while (T-- > 0) {   
            int N = scanner.nextInt();
            int originalN = N;  // Preserve the original value of N
            int maxFreq = 0;
            int freq = 0;
            int ans = 0;

            for (int i = 2; i * i <= N; i++) {
                if (N % i != 0)
                    continue;
                
                freq = 0;
                while (N % i == 0) {
                    N /= i;
                    freq++;
                }
                
                if (freq > maxFreq) {
                    maxFreq = freq;
                    ans = i;
                }
            }
            
            if (N != 1) {
                freq = 1;
                
                if (freq > maxFreq) {
                    maxFreq = freq;
                    ans = N;
                }
            }
            
            // To find the smallest K such that M = N / K has the maximum divisors, we use the factor with maximum frequency
            if (ans == 0) {
                ans = originalN;
            }
            
            System.out.println(ans);
        }

	}
}
